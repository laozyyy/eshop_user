// Code generated by Kitex v0.11.3. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	user_info "eshop_user/kitex_gen/eshop/user_info"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetOneUser": kitex.NewMethodInfo(
		getOneUserHandler,
		newUserServiceGetOneUserArgs,
		newUserServiceGetOneUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetOneUserByName": kitex.NewMethodInfo(
		getOneUserByNameHandler,
		newUserServiceGetOneUserByNameArgs,
		newUserServiceGetOneUserByNameResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"InsertOneUser": kitex.NewMethodInfo(
		insertOneUserHandler,
		newUserServiceInsertOneUserArgs,
		newUserServiceInsertOneUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user_info.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user_info",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func getOneUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_info.UserServiceGetOneUserArgs)
	realResult := result.(*user_info.UserServiceGetOneUserResult)
	success, err := handler.(user_info.UserService).GetOneUser(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetOneUserArgs() interface{} {
	return user_info.NewUserServiceGetOneUserArgs()
}

func newUserServiceGetOneUserResult() interface{} {
	return user_info.NewUserServiceGetOneUserResult()
}

func getOneUserByNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_info.UserServiceGetOneUserByNameArgs)
	realResult := result.(*user_info.UserServiceGetOneUserByNameResult)
	success, err := handler.(user_info.UserService).GetOneUserByName(ctx, realArg.Name)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetOneUserByNameArgs() interface{} {
	return user_info.NewUserServiceGetOneUserByNameArgs()
}

func newUserServiceGetOneUserByNameResult() interface{} {
	return user_info.NewUserServiceGetOneUserByNameResult()
}

func insertOneUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user_info.UserServiceInsertOneUserArgs)
	realResult := result.(*user_info.UserServiceInsertOneUserResult)
	success, err := handler.(user_info.UserService).InsertOneUser(ctx, realArg.User)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceInsertOneUserArgs() interface{} {
	return user_info.NewUserServiceInsertOneUserArgs()
}

func newUserServiceInsertOneUserResult() interface{} {
	return user_info.NewUserServiceInsertOneUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetOneUser(ctx context.Context, request *user_info.GetOneUserRequest) (r *user_info.GetOneUserResponse, err error) {
	var _args user_info.UserServiceGetOneUserArgs
	_args.Request = request
	var _result user_info.UserServiceGetOneUserResult
	if err = p.c.Call(ctx, "GetOneUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOneUserByName(ctx context.Context, name string) (r *user_info.GetOneUserResponse, err error) {
	var _args user_info.UserServiceGetOneUserByNameArgs
	_args.Name = name
	var _result user_info.UserServiceGetOneUserByNameResult
	if err = p.c.Call(ctx, "GetOneUserByName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InsertOneUser(ctx context.Context, user *user_info.User) (r *user_info.InsertOneUserResponse, err error) {
	var _args user_info.UserServiceInsertOneUserArgs
	_args.User = user
	var _result user_info.UserServiceInsertOneUserResult
	if err = p.c.Call(ctx, "InsertOneUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
